#	Example:
# 
#	example_effect = {
#		add_political_power = 66
#		add_popularity = {
#			ideology = fascism
#			popularity = 0.33
#		}
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

#Daily Labour Requirements Calculation

on_daily_labour_calculations = {
		
	#Calculates total population (in 1000s)
	set_variable = { total_population = max_manpower_k }
	set_variable = { total_non_core_population = 0 }
	set_variable = { avaliable_non_core_population = 0 }
	
	every_controlled_state = {
		limit = {
			NOT = { is_core_of = PREV }
		}
		set_variable = { state_avaliable_labour = state_population_k }
		multiply_variable = { state_avaliable_labour = state_level_agriculture_penalty }
		add_to_variable = { PREV.total_non_core_population = THIS.state_population_k }
		add_to_variable = { PREV.avaliable_non_core_population = THIS.state_avaliable_labour }
	}

	subtract_from_variable = { total_population = total_non_core_population }
	
	#Calculate Avaliable non-core Population
	subtract_from_variable = { total_non_core_population = avaliable_non_core_population }
	multiply_variable = { total_non_core_population = 0.2 }
	
	#Calculates total labourpower (in 1000s)
	set_variable = { total_labour_population = total_population }
	set_variable = { total_core_labour_population = total_population }
	add_to_variable = { total_labour_population = total_non_core_population }
	set_variable = { total_population_with_foreign_workers = total_labour_population }
	
	#Calculates total working age (in 1000s)
	multiply_variable = { total_core_labour_population = 0.6 }
	multiply_variable = { total_labour_population = 0.6 }
	
	#Factors in female particapation rate penalty
	set_variable = { female_penalty_calculation = 1 }
	subtract_from_variable = { female_penalty_calculation = female_participation_rate }
	multiply_variable = { female_penalty_calculation = 0.5 }
	
	#Calculate penalty from females to apply to total labourpower
	set_variable = { female_penalty_applied = 1 }
	subtract_from_variable = { female_penalty_applied = female_penalty_calculation }
	
	#Apply female penalty to total labourpower
	set_variable = { total_labourpower = total_labour_population }
	multiply_variable = { total_core_labour_population = female_penalty_applied }
	multiply_variable = { total_labourpower = female_penalty_applied }
	
	#Calculate additional female penalty
	multiply_variable = { female_penalty_calculation = -1 }
	multiply_variable = { female_penalty_calculation = 0.6 }
	
	#Apply Agricultural Burden to States / Record it
	set_variable = { agricultural_penalty_percentage = 0 }
	
	every_controlled_state = {
		#Calculates agricultural burden
		set_variable = { agriculture_burden = state_level_agriculture_penalty }
		multiply_variable = { agriculture_burden = PREV.total_core_labour_population }
		
		#Calculates agricultural penalty to apply to states
		set_variable = { agriculture_requirements = agriculture_burden }
		divide_variable = { agriculture_requirements = PREV.total_population }
		multiply_variable = { agriculture_requirements = -1 }
		
		#Factors in trade for core states
		if = {
			limit = { is_core_of = PREV }
			set_variable = { agriculture_trade = PREV.agriculture_trade }
			multiply_variable = { agriculture_trade = PREV.total_core_labour_population }
			divide_variable = { agriculture_trade = PREV.total_population }
			add_to_variable = { agriculture_requirements = agriculture_trade }
			set_variable = { agriculture_burden = agriculture_requirements }
			multiply_variable = { agriculture_burden = -1 }
			multiply_variable = { agriculture_burden = state_population_k }
			
			#Agricultural burden
			add_to_variable = { PREV.agricultural_penalty_percentage = THIS.agriculture_burden }
		}
		
		#Adds female penalty
		set_variable = { female_penalty_applied = PREV.female_penalty_calculation }
	}
	
	#Calculate number of labour needed for resources
	
	#Sets variable equal to number of resources
	set_variable = { labour_oil = resource_produced@oil }
	set_variable = { labour_aluminium = resource_produced@aluminium }
	set_variable = { labour_tungsten = resource_produced@tungsten }
	set_variable = { labour_steel = resource_produced@steel }
	set_variable = { labour_chromium = resource_produced@chromium }
	set_variable = { labour_coal = resource_produced@coal }
	set_variable = { labour_bauxite = resource_produced@bauxite }
	set_variable = { labour_iron = resource_produced@iron }
	
	#Adjusts based on building amounts
	add_to_variable = { labour_coal = num_of_military_factories  }
	add_to_variable = { labour_coal = num_of_civilian_factories  }
	add_to_variable = { labour_coal = num_of_civilian_factories  }
	add_to_variable = { labour_coal = num_of_naval_factories  }
	add_to_variable = { labour_steel = num_of_civilian_factories  }
	
	#Estimate building amounts of aluminum smelteries/steel refineries
	set_variable = { num_of_steel_refineries = labour_steel }
	divide_variable = { num_of_steel_refineries = 25 }
	set_variable = { steel_capital = num_of_steel_refineries }
	set_variable = { num_of_aluminum_refineries = labour_aluminum}
	divide_variable = { num_of_aluminum_refineries = 25 }
	set_variable = { aluminum_capital = num_of_aluminum_refineries }
	
	#Calculate total capital impact
	# capital_impact_calculator = yes
	
	#Add appopriate costs
	add_to_variable = { labour_tungsten = num_of_steel_refineries  }
	
	#Increase by 50 to add relevant costs
	multiply_variable = { num_of_steel_refineries = 25 }
	multiply_variable = { num_of_aluminum_refineries = 25 }
	add_to_variable = { labour_coal = num_of_steel_refineries  }
	add_to_variable = { labour_bauxite = num_of_aluminum_refineries }
	add_to_variable = { labour_bauxite = num_of_aluminum_refineries }
	
	#Increased by factor of 0.2 for iron (steel)
	multiply_variable = { num_of_steel_refineries = 1.2 }
	add_to_variable = { labour_iron = num_of_steel_refineries  }
	
	#Remove imports for iron/coal/bauxite/tungsten
	subtract_from_variable = { labour_iron = resource_imported@iron }
	subtract_from_variable = { labour_coal = resource_imported@coal }
	subtract_from_variable = { labour_bauxite = resource_imported@bauxite }
	subtract_from_variable = { labour_tungsten = resource_imported@tungsten }
	
	#Multiplies number of resource by labour requirements per resource (divided by 1000 to stop overflows)
	multiply_variable = { labour_oil = 0.02 }
	multiply_variable = { labour_aluminium = 0.02 }
	multiply_variable = { labour_tungsten = 0.02 }
	multiply_variable = { labour_steel = 0.25 }
	multiply_variable = { labour_chromium = 0.02 }
	multiply_variable = { labour_coal = 0.150 }
	multiply_variable = { labour_bauxite = 0.005 }
	multiply_variable = { labour_iron = 0.125 }
	
	#Adds up total labour needed for resources
	set_variable = { labour_total_resource = labour_oil }
	#add_to_variable = { labour_total_resource = labour_aluminium } 
	add_to_variable = { labour_total_resource = labour_tungsten } 
	#add_to_variable = { labour_total_resource = labour_steel } 
	add_to_variable = { labour_total_resource = labour_chromium } 
	add_to_variable = { labour_total_resource = labour_coal } 
	add_to_variable = { labour_total_resource = labour_bauxite } 
	add_to_variable = { labour_total_resource = labour_iron } 
	
	#Calculate total labour needs
	
	#Sets variable equal to number of factories
	set_variable = { labour_total_factories = num_of_factories }
	#Multiplies number of factory by labour requirements per factory (divided by 1000 to stop overflows)
	multiply_variable = { labour_total_factories = 10 }
	
	
	set_variable = { total_labour_needs = labour_total_factories }
	add_to_variable = { total_labour_needs = labour_total_resource }
	# labour_impact_calculator = yes
	
	#Calculate Civilian Needs
	if = {
		limit = { NOT = { tag = ENG } }
		set_variable = { civilian_needs = 0.1 }
		ELSE = { set_variable = { civilian_needs = 0.2 } }
	}
	multiply_variable = { civilian_needs = total_labourpower }	
	
	#Adds civilian needs to total labour needs.
	add_to_variable = { total_labour_needs = civilian_needs }
	
	#Calculates Division Slice
	set_variable = { division_slice = num_battalions@infantry }
	set_variable = { div_slice_calculator = logistical_level }
	multiply_variable = { div_slice_calculator = 2.5 }
	add_to_variable = { div_slice_calculator = 5 }
	divide_variable = { div_slice_calculator = 10 }
	multiply_variable = { division_slice = div_slice_calculator }
	
	set_variable = { division_slice_thousands = division_slice }
    divide_variable = { division_slice = total_population_with_foreign_workers }
    multiply_variable = { division_slice = -1 }
	
	#Calculates penalty to apply to total population
	set_variable = { labour_penalty_percentage = total_labour_needs }
	divide_variable = { labour_penalty_percentage = total_population_with_foreign_workers }
	multiply_variable = { labour_penalty_percentage = -1 }
	
	#Calculates total agricultural burden
	set_variable = { labour_total_agriculture = agricultural_penalty_percentage }
	divide_variable = { agricultural_penalty_percentage = total_population_with_foreign_workers }
	multiply_variable = { agricultural_penalty_percentage = -1 }
	
	#Calculates total economic bonus
	# if = {
	# 	limit = { NOT = { has_variable = total_factor_productivity } }
	# 	set_variable = { total_factor_productivity = 1 }
	# }
	# set_variable = { factory_output_multiplier = total_factor_productivity }
	# multiply_variable = { factory_output_multiplier = capital_multiplier }
	# multiply_variable = { factory_output_multiplier = labour_multiplier }
	
	#Gets Output/K
	# divide_variable = { factory_output_multiplier = total_capital }
	
	#calculate civ output
	# set_variable = { civ_output = factory_output_multiplier }
	# multiply_variable = { civ_output = num_of_civilian_factories }
	
	#calculate total output
	# set_variable = { total_output = factory_output_multiplier }
	# multiply_variable = { total_output = total_capital }
	
	#Calculate Upkeep Costs
	# set_variable = { upkeep = total_capital }
	# multiply_variable = { upkeep = 5 }
	# set_variable = { upkeep_needs = upkeep }
	# multiply_variable = { upkeep = upkeep_modifier }
	# divide_variable = { upkeep = total_output }
	
	#Sets military factory output modifier
	# set_variable = { mil_bonus = factory_output_multiplier }
	# multiply_variable = { mil_bonus = 1.136 }
	
	# set_variable = { civ_bonus = mil_bonus }
	# divide_variable = { civ_bonus = 41 }
	# divide_variable = { civ_bonus = 10 }
	
	# divide_variable = { mil_bonus = 100 }
	
	# subtract_from_variable = { mil_bonus = 1 }
	# subtract_from_variable = { civ_bonus = 1 }
	
	#Set dynamic number of civilian trucks per 6 month
	set_variable = { civilian_truck_production = num_of_civilian_factories }
	multiply_variable = { civilian_truck_production = 100 }
}

calculate_state_level_agriculture_penalty = {
	if = {
		limit = {
			is_core_of = CAN
		}
		set_variable = { state_level_agriculture_penalty = 0.1 }
	}
	else_if = {
		limit = {
			is_core_of = URG
		}
		set_variable = { state_level_agriculture_penalty = 0.15 }
	}
	else_if = {
		limit = {
			is_core_of = USA
		}
		set_variable = { state_level_agriculture_penalty = 0.16 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ENG
				is_core_of = AST
				is_core_of = NZL
				is_core_of = ARG
				is_core_of = CHL
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.2 }

	}
	else_if = {
		limit = {
			OR = {
				is_core_of = NOR
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.20 }
	}
	
	else_if = {
		limit = {
			OR = {
				is_core_of = DEN
				is_core_of = SWE
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.20 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = HOL
				is_core_of = BEL
				is_core_of = GER
				is_core_of = CZE
				is_core_of = LUX
				is_core_of = AUS
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.3 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = FRA
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.4 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ITA
				is_core_of = SPR
				is_core_of = POR
				is_core_of = SAF
				is_core_of = FIN
				AND = {
					NOT = {
						is_core_of = CHL
						is_core_of = ARG
					}
					is_on_continent = south_america
				}
				AND = {
					NOT = {
						is_core_of = USA
						is_core_of = CAN
					}
					is_on_continent = north_america
				}
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.45 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = SOV
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.52 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = JAP
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.55 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = POL
				AND = {
					is_core_of = UKR
					is_core_of = POL
				}
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.52 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = HUN
				is_core_of = SLO
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.40 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = BUL
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.35 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = LIT
				is_core_of = LAT
				is_core_of = EST
				is_core_of = PER
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.58 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = YUG
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.44 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = GRE
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.40 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = TUR
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.50 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ROM
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.65 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ALB
				is_core_of = EGY
				is_core_of = TUN
				is_core_of = MOR
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.7 }
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					NOT = {
						is_core_of = JAP
						is_core_of = SOV
					}
					is_on_continent = asia
				}
				
				AND = {
					NOT = {
						is_core_of = AST
						is_core_of = NZL
					}
					is_on_continent = australia
				}
				
				AND = {
					NOT = {
						is_core_of = TUR
						is_core_of = PER
					}
					is_on_continent = middle_east
				}
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.75 }
	}
	else_if = {
		limit = {
			NOT = {
				is_core_of = SAF
			}
			is_on_continent = africa
		}
		set_variable = { state_level_agriculture_penalty = 0.8 }
	}
	else ={	
		set_variable = { state_level_agriculture_penalty = 0.75 }
	}
}