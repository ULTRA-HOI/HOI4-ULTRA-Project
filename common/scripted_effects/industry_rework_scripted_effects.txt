#Daily Labour Requirements Calculation

on_daily_labour_calculations = {
		
	#Calculates total population (in 1000s) 
	set_variable = { total_population = max_manpower_k } 
	set_variable = { total_non_core_population = 0 } 
	set_variable = { avaliable_non_core_population = 0 } 
	
	# Loop through every non-core state, add non-core pop to total_non_core_population and available non-core pop to avaliable_non_core_population modified by agricultural penalty of state 
	every_controlled_state = {
		limit = {
			NOT = { is_core_of = PREV }
		}
		set_variable = { state_avaliable_labour = state_population_k }
		multiply_variable = { state_avaliable_labour = state_level_agriculture_penalty }
		add_to_variable = { PREV.total_non_core_population = THIS.state_population_k }
		add_to_variable = { PREV.avaliable_non_core_population = THIS.state_avaliable_labour }
	}

	subtract_from_variable = { total_population = total_non_core_population } 
	
	#Calculate Avaliable non-core Population
	multiply_variable = { avaliable_non_core_population = 0.2 } #use available non-core pop 
	
	#Calculates total labourpower (in 1000s)
	set_variable = { total_labour_population = total_population }
	set_variable = { total_core_labour_population = total_population }
	add_to_variable = { total_labour_population = avaliable_non_core_population }
	set_variable = { total_population_with_foreign_workers = total_labour_population }
	
	#Calculates total working age (in 1000s)
	multiply_variable = { total_core_labour_population = 0.7 }
	multiply_variable = { total_labour_population = 0.7 }
	
	#Factors in female particapation rate penalty
	set_variable = { female_penalty_calculation = 1 }
	subtract_from_variable = { female_penalty_calculation = female_participation_rate }
	multiply_variable = { female_penalty_calculation = 0.5 } #50% females in society
	
	#Calculate penalty from females to apply to total labourpower
	set_variable = { female_penalty_applied = 1 }
	subtract_from_variable = { female_penalty_applied = female_penalty_calculation }
	
	#Apply female penalty to total labourpower
	set_variable = { total_labourpower = total_labour_population }
	multiply_variable = { total_core_labour_population = female_penalty_applied }
	multiply_variable = { total_labourpower = female_penalty_applied }
	
	
	
	#Calculate additional female penalty
	multiply_variable = { female_penalty_calculation = -1 }
	
	#Apply Agricultural Burden to States / Record it
	set_variable = { agricultural_penalty_percentage = 0 }
	set_variable = { agriculture_penalty_temp = 0 }
	
	# gather damaged buildings in states 
	set_variable = { damaged_MIL_current = 0 }
	set_variable = { damaged_CIV_current = 0 }
	set_variable = { damaged_NAV_current = 0 }

	every_controlled_state = {
		limit = { is_core_of = PREV }
		set_variable = { agriculture_modifier = state_level_agriculture_penalty }
		multiply_variable = { agriculture_modifier = THIS.state_population_k }
		add_to_variable = { PREV.agriculture_penalty_temp = THIS.agriculture_modifier }

		add_to_variable = { damaged_CIV_current = damaged_building_level@industrial_complex }
		add_to_variable = { damaged_MIL_current = damaged_building_level@arms_factory }
		add_to_variable = { damaged_NAV_current = damaged_building_level@dockyard }
	}

	set_variable = { agriculture_percentage_core = agriculture_penalty_temp}
	set_variable = { agriculture_total_temp = THIS.total_population }

	divide_variable = { agriculture_percentage_core = THIS.total_population }

	every_controlled_state = {
		limit = { 
			NOT = { is_core_of = PREV }
			check_variable = { 
			state_level_agriculture_penalty < PREV.agriculture_percentage_core
			} 	
		}
		
		
		set_variable = { agriculture_modifier = state_level_agriculture_penalty }
		multiply_variable = { agriculture_modifier = THIS.state_population_k }
		add_to_variable = { PREV.agriculture_penalty_temp = THIS.agriculture_modifier }
		add_to_variable = { PREV.agriculture_total_temp = THIS.state_population_k }

		add_to_variable = { damaged_CIV_current = damaged_building_level@industrial_complex }
		add_to_variable = { damaged_MIL_current = damaged_building_level@arms_factory }
		add_to_variable = { damaged_NAV_current = damaged_building_level@dockyard }
	}

	add_to_variable = { agricultural_penalty_percentage = agriculture_penalty_temp }
	divide_variable = { agricultural_penalty_percentage = agriculture_total_temp }
	multiply_variable = { agricultural_penalty_percentage = -1 } 
	
	# For display
	set_variable = { agriculture_occupation_bonus = agriculture_percentage_core }
	add_to_variable = { agriculture_occupation_bonus = agricultural_penalty_percentage }
	multiply_variable = { agriculture_occupation_bonus = total_labourpower }
	set_variable = { labour_agriculture_display = agricultural_penalty_percentage }
	multiply_variable = { labour_agriculture_display = -1 }
	multiply_variable = { labour_agriculture_display = total_labourpower }
	#Calculate number of labour needed for resources

	#Sets variable equal to number of resources 
	set_variable = { labour_oil = resource_produced@oil }
	set_variable = { labour_aluminium = resource_produced@aluminium }
	set_variable = { labour_tungsten = resource_produced@tungsten }
	set_variable = { labour_steel = resource_produced@steel }
	set_variable = { labour_chromium = resource_produced@chromium }
	set_variable = { labour_coal = resource_produced@coal }
	set_variable = { labour_bauxite = resource_produced@bauxite }
	set_variable = { labour_iron = resource_produced@iron }
	set_variable = { labour_rubber = resource_produced@rubber }
	
	set_variable = { consumed_oil = modifier@country_resource_cost_oil }
	set_variable = { consumed_aluminium = modifier@country_resource_cost_aluminium }
	set_variable = { consumed_tungsten = modifier@country_resource_cost_tungsten }
	set_variable = { consumed_steel = modifier@country_resource_cost_steel }
	set_variable = { consumed_chromium = modifier@country_resource_cost_chromium }
	set_variable = { consumed_coal = modifier@country_resource_cost_coal }
	set_variable = { consumed_bauxite = modifier@country_resource_cost_bauxite }
	set_variable = { consumed_iron = modifier@country_resource_cost_iron }
	set_variable = { consumed_rubber = modifier@country_resource_cost_rubber }
	
	add_to_variable = { labour_oil = consumed_oil }
	add_to_variable = { labour_aluminium = consumed_aluminium }
	add_to_variable = { labour_tungsten = consumed_tungsten }
	add_to_variable = { labour_steel = consumed_steel }
	add_to_variable = { labour_chromium = consumed_chromium }
	add_to_variable = { labour_coal = consumed_coal }
	add_to_variable = { labour_bauxite = consumed_bauxite }
	add_to_variable = { labour_iron = consumed_iron }
	add_to_variable = { labour_rubber = consumed_rubber }

	
	#Multiplies number of resource by labour requirements per resource (divided by 1000 to stop overflows)
	multiply_variable = { labour_oil = 0.1 } #100 needed per resource produced
	multiply_variable = { labour_aluminium = 0.05 }
	multiply_variable = { labour_tungsten = 0.05 }
	multiply_variable = { labour_steel = 0.05 }
	multiply_variable = { labour_chromium = 0.05 }
	multiply_variable = { labour_coal = 0.01 }
	multiply_variable = { labour_bauxite = 0.01 }
	multiply_variable = { labour_iron = 0.01 }
	multiply_variable = { labour_rubber = 0.05 }
	
	#Adds up total labour needed for resources
	set_variable = { labour_total_resource = labour_oil }
	add_to_variable = { labour_total_resource = labour_aluminium } 
	add_to_variable = { labour_total_resource = labour_tungsten } 
	add_to_variable = { labour_total_resource = labour_steel } 
	add_to_variable = { labour_total_resource = labour_chromium } 
	add_to_variable = { labour_total_resource = labour_coal } 
	add_to_variable = { labour_total_resource = labour_bauxite } 
	add_to_variable = { labour_total_resource = labour_iron } 
	add_to_variable = { labour_total_resource = labour_rubber }
	
	#Calculate total labour needs
	
	#Sets variable equal to number of factories
	set_variable = { labour_military_factories = num_of_military_factories }
	multiply_variable = { labour_military_factories = 5.0 } #5000 MP per mil factory
	set_variable = { labour_civilian_factories = num_of_civilian_factories }
	multiply_variable = { labour_civilian_factories = 6.5 } #6500 MP per civ factory
	set_variable = { labour_naval_factories = num_of_naval_factories }
	multiply_variable = { labour_naval_factories = 7.5 } #7500 MP per nav factory

	add_to_variable = { labour_military_factories = damaged_MIL_current }
	add_to_variable = { labour_civilian_factories = damaged_CIV_current }
	add_to_variable = { labour_naval_factories = damaged_NAV_current }

	set_variable = { labour_total_factories = labour_military_factories }
	add_to_variable = { labour_total_factories = labour_civilian_factories }
	add_to_variable = { labour_total_factories = labour_naval_factories }
	
	
	set_variable = { total_labour_needs = labour_total_factories }
	add_to_variable = { total_labour_needs = labour_total_resource }
	# labour_impact_calculator = yes
	
	#Calculate Civilian Needs
	if = {
		limit = { tag = ENG }
		set_variable = { civilian_needs = 0.15 }
	}
	if = {
		limit = { tag = FRA }
		set_variable = { civilian_needs = 0.14 }
	}
	if = {
		limit = { NOT = { tag = ENG } NOT = { tag = FRA }}
		set_variable = { civilian_needs = 0.1 }
	}
	multiply_variable = { civilian_needs = total_labourpower }	
	
	#Adds civilian needs to total labour needs.
	add_to_variable = { total_labour_needs = civilian_needs }
	
	#actually remove needed manpower from pool
	subtract_from_variable = { total_labourpower = total_labour_needs }
	
	#Calculates penalty to apply to total population
	set_variable = { labour_penalty_percentage = total_labour_needs }
	divide_variable = { labour_penalty_percentage = total_population_with_foreign_workers }
	multiply_variable = { labour_penalty_percentage = -1 }
	
	#Set dynamic number of civilian trucks per 6 month
	set_variable = { civilian_truck_production = num_of_civilian_factories }
	multiply_variable = { civilian_truck_production = 6 }
}

calculate_state_level_agriculture_penalty = {
	if = {
		limit = {
			is_core_of = CAN
		}
		set_variable = { state_level_agriculture_penalty = 0.08 }
	}
	else_if = {
		limit = {
			is_core_of = URG
		}
		set_variable = { state_level_agriculture_penalty = 0.08 }
	}
	else_if = {
		limit = {
			is_core_of = USA
		}
		set_variable = { state_level_agriculture_penalty = 0.10 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ENG
				is_core_of = AST
				is_core_of = NZL
				is_core_of = ARG
				is_core_of = CHL
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.12 }

	}
	else_if = {
		limit = {
			OR = {
				is_core_of = NOR
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.12 }
	}
	
	else_if = {
		limit = {
			OR = {
				is_core_of = DEN
				is_core_of = SWE
				is_core_of = SWI
				is_core_of = HOL
				is_core_of = BEL
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.12 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = GER
				is_core_of = CZE
				is_core_of = LUX
				is_core_of = AUS
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.15 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = FRA
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.17 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ITA
				is_core_of = SPR
				is_core_of = POR
				is_core_of = SAF
				is_core_of = FIN
				AND = {
					NOT = {
						is_core_of = CHL
						is_core_of = ARG
					}
					is_on_continent = south_america
				}
				AND = {
					NOT = {
						is_core_of = USA
						is_core_of = CAN
					}
					is_on_continent = north_america
				}
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.22 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = SOV
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.26 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = JAP
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.22 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = POL
				AND = {
					is_core_of = UKR
					is_core_of = POL
				}
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.20 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = HUN
				is_core_of = SLO
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.19 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = BUL
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.18 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = LIT
				is_core_of = LAT
				is_core_of = EST
				is_core_of = PER
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.29 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = YUG
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.22 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = GRE
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.20 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = TUR
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.25 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ROM
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.28 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ALB
				is_core_of = EGY
				is_core_of = TUN
				is_core_of = MOR
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.35 }
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					NOT = {
						is_core_of = JAP
						is_core_of = SOV
						is_owned_by = RAJ
					}
					is_on_continent = asia
				}
				
				AND = {
					NOT = {
						is_core_of = AST
						is_core_of = NZL
					}
					is_on_continent = australia
				}
				
				AND = {
					NOT = {
						is_core_of = TUR
						is_core_of = PER
					}
					is_on_continent = middle_east
				}
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.38 }
	}
	else_if = {
		limit = {
			NOT = {
				is_core_of = SAF
			}
			is_on_continent = africa
		}
		set_variable = { state_level_agriculture_penalty = 0.4 }
	}
	else_if = {
		limit = {
			OR = {
				is_owned_by = RAJ
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.42 }
	}
	else ={	
		set_variable = { state_level_agriculture_penalty = 0.38 }
	}
}

# Actual run on init of game.
init_default_logistics_and_women = {
	#Sets default female workplace participation rate (to offset labour needs).
	set_variable = { female_participation_rate = 0.5 }
			
	#Sets default logistical level
	#set_variable = { logistical_level = 1 }
	#set_variable = { signal_level = 1 }
}


 # Actual run on init of game.
init_industry_rework = {
	# Adds agriculture mechanisation to every relevant countries
	every_owned_state = {
		calculate_state_level_agriculture_penalty = yes
	}
	#Adds key labour requirements dynamic modifier

	on_daily_labour_calculations = yes
	add_dynamic_modifier = { modifier = agriculture_needs }
	add_dynamic_modifier = { modifier = labour_requirements }
	add_dynamic_modifier = { modifier = female_labour_penalty }
	add_dynamic_modifier = { modifier = not_of_working_age_penalty }
}

reduced_civillian_resources_scripted_effect = {
	set_temp_variable = { cic_resource_factor_temp = cic_resource_factor }
	set_temp_variable = { num_factories_temp = THIS.num_of_controlled_factories } #num_of_civilian_factories includes traded factories. As these do not consume resources, we do not want them in our calculations as trading allows to go net pos in resources
	subtract_from_temp_variable = { num_factories_temp = THIS.num_of_military_factories } #therefore we take the controlled factories(not owned since we need the total number of operating factories) and then substract all mic and nic from them to just get cic
	subtract_from_temp_variable = { num_factories_temp = THIS.num_of_naval_factories }
	multiply_temp_variable = { cic_resource_factor_temp = num_factories_temp }
	
	set_variable = { cic_reduced_steel = 2 }
	set_variable = { cic_reduced_aluminium = 1.5 }
	set_variable = { cic_reduced_tungsten = 0.25 }
	set_variable = { cic_reduced_chromium = 0.1 }
	set_variable = { cic_reduced_rubber = 0.2 }
	
	multiply_variable = { cic_reduced_steel = cic_resource_factor_temp }
	multiply_variable = { cic_reduced_aluminium = cic_resource_factor_temp }
	multiply_variable = { cic_reduced_tungsten = cic_resource_factor_temp }
	multiply_variable = { cic_reduced_chromium = cic_resource_factor_temp }
	multiply_variable = { cic_reduced_rubber = cic_resource_factor_temp }
}
