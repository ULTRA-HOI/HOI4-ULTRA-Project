#Daily Labour Requirements Calculation

on_daily_labour_calculations = {
		
	#Calculates total population (in 1000s) 
	set_variable = { total_core_population_k = max_manpower_k } 
	set_variable = { total_non_core_population_k = 0 } 
	set_temp_variable = { avaliable_non_core_population_k = 0 } 
	
	# Loop through every non-core state, add non-core pop to total_non_core_population_k and available non-core pop to avaliable_non_core_population_k modified by agricultural penalty of state 
	every_controlled_state = {
		set_variable = { state_avaliable_labour_k = state_population_k }
		multiply_variable = { state_avaliable_labour_k = state_level_agriculture_penalty }
		if = {
			limit = {
				NOT = { is_core_of = PREV }
			}
			#set_temp_variable = { state_compliance_manpower_factor = compliance }
			#multiply_temp_variable = { state_compliance_manpower_factor = 0.10 } # static_modifiers.txt -> compliance_effect
			#add_to_temp_variable = { state_compliance_manpower_factor = 0.02 } # defines.lua -> LOCAL_MANPOWER_ACCESSIBLE_NON_CORE_FACTOR
			#if = {
			#	limit = { compliance > 59 } # compliance_modifiers.txt -> compliance_60
			#	multiply_temp_variable = { state_compliance_manpower_factor = 0.05 } # static_modifiers -> compliance_effect
			#}
			#multiply_variable = { state_avaliable_labour_k = state_compliance_manpower_factor }
			add_to_variable = { PREV.total_non_core_population_k = state_population_k }
			#add_to_temp_variable = { PREV.avaliable_non_core_population_k = state_avaliable_labour_k }
		}
	}
	
	subtract_from_variable = { total_core_population_k = total_non_core_population_k } 
	
	#Calculates total labourpower (in 1000s)
	set_variable = { total_core_non_core_population_k = total_core_population_k }
	#add_to_variable = { total_core_non_core_population_k = avaliable_non_core_population_k }
	set_variable = { total_population_with_foreign_workers_k = total_core_non_core_population_k }
	
	#Calculates total working age (in 1000s)
	multiply_variable = { total_core_non_core_population_k = 0.7 }
	
	#Factors in female particapation rate penalty
	set_variable = { female_penalty_calculation = 1 }
	subtract_from_variable = { female_penalty_calculation = female_participation_rate }
	multiply_variable = { female_penalty_calculation = 0.5 } #50% females in society
	
	#Calculate penalty from females to apply to total labourpower
	set_variable = { female_penalty_applied = 1 }
	subtract_from_variable = { female_penalty_applied = female_penalty_calculation }
	
	#Apply female penalty to total labourpower
	set_variable = { total_labour_population_k = total_core_non_core_population_k }
	multiply_variable = { total_labour_population_k = female_penalty_applied }
	
	#Calculate additional female penalty
	multiply_variable = { female_penalty_calculation = -1 }
	multiply_variable = { female_penalty_calculation = 0.7 } # factor in working age

	set_variable = { total_free_labour_k = total_labour_population_k }
	
	calculate_argriculture_labour = yes
	calculate_resources_labour = yes
	calculate_factories_labour = yes
	calculate_civilian_labour = yes
	calculate_logistics_labour = yes

	#actually remove needed manpower from pool
	subtract_from_variable = { total_free_labour_k = agriculture_labour_k }
	subtract_from_variable = { total_free_labour_k = factories_labour_k }
	subtract_from_variable = { total_free_labour_k = resources_labour_k }
	subtract_from_variable = { total_free_labour_k = civilian_services_labour_k }
	subtract_from_variable = { total_free_labour_k = army_logistics_labour_k }
	
	#Calculates penalty to apply to total population
	set_variable = { agricultural_penalty_calculation = agriculture_labour_k }
	divide_variable = { agricultural_penalty_calculation = total_population_with_foreign_workers_k }
	multiply_variable = { agricultural_penalty_calculation = -1 }
	set_variable = { factories_labour_penalty_calculation = factories_labour_k }
	divide_variable = { factories_labour_penalty_calculation = total_population_with_foreign_workers_k }
	multiply_variable = { factories_labour_penalty_calculation = -1 }
	set_variable = { resources_labour_penalty_calculation = resources_labour_k }
	divide_variable = { resources_labour_penalty_calculation = total_population_with_foreign_workers_k }
	multiply_variable = { resources_labour_penalty_calculation = -1 }
	set_variable = { civilian_services_labour_penalty_calculation = civilian_services_labour_k }
	divide_variable = { civilian_services_labour_penalty_calculation = total_population_with_foreign_workers_k }
	multiply_variable = { civilian_services_labour_penalty_calculation = -1 }
	set_variable = { army_logistics_penalty_calculation = army_logistics_labour_k }
    divide_variable = { army_logistics_penalty_calculation = total_population_with_foreign_workers_k }
    multiply_variable = { army_logistics_penalty_calculation = -1 }
}

calculate_argriculture_labour = {
	set_variable = { agriculture_labour_k = 0 }
	every_controlled_state = {
		if = {
			limit = {
				is_core_of = PREV
			}
			set_variable = { state_agriculture_labour_k = state_population_k }
			multiply_variable = { state_agriculture_labour_k = state_level_agriculture_penalty }
			clamp_variable = {
				var = state_agriculture_labour_k
				min = 0
				max = state_avaliable_labour_k
			}
			add_to_variable = { PREV.agriculture_labour_k = state_agriculture_labour_k }
		}
	}
}

calculate_resources_labour = {
	#Sets variable equal to number of resources 
	set_temp_variable = { labour_oil = resource_produced@oil }
	set_temp_variable = { labour_aluminium = resource_produced@aluminium }
	set_temp_variable = { labour_tungsten = resource_produced@tungsten }
	set_temp_variable = { labour_steel = resource_produced@steel }
	set_temp_variable = { labour_chromium = resource_produced@chromium }
	set_temp_variable = { labour_coal = resource_produced@coal }
	set_temp_variable = { labour_bauxite = resource_produced@bauxite }
	set_temp_variable = { labour_iron = resource_produced@iron }
	set_temp_variable = { labour_rubber = resource_produced@rubber }
	
	set_temp_variable = { consumed_oil = modifier@country_resource_cost_oil }
	set_temp_variable = { consumed_aluminium = modifier@country_resource_cost_aluminium }
	set_temp_variable = { consumed_tungsten = modifier@country_resource_cost_tungsten }
	set_temp_variable = { consumed_steel = modifier@country_resource_cost_steel }
	set_temp_variable = { consumed_chromium = modifier@country_resource_cost_chromium }
	set_temp_variable = { consumed_coal = modifier@country_resource_cost_coal }
	set_temp_variable = { consumed_bauxite = modifier@country_resource_cost_bauxite }
	set_temp_variable = { consumed_iron = modifier@country_resource_cost_iron }
	set_temp_variable = { consumed_rubber = modifier@country_resource_cost_rubber }
	
	add_to_temp_variable = { labour_oil = consumed_oil }
	add_to_temp_variable = { labour_aluminium = consumed_aluminium }
	add_to_temp_variable = { labour_tungsten = consumed_tungsten }
	add_to_temp_variable = { labour_steel = consumed_steel }
	add_to_temp_variable = { labour_chromium = consumed_chromium }
	add_to_temp_variable = { labour_coal = consumed_coal }
	add_to_temp_variable = { labour_bauxite = consumed_bauxite }
	add_to_temp_variable = { labour_iron = consumed_iron }
	add_to_temp_variable = { labour_rubber = consumed_rubber }

	
	#Multiplies number of resource by labour requirements per resource (divided by 1000 to stop overflows)
	multiply_temp_variable = { labour_oil = 0.1 } #100 needed per resource produced
	multiply_temp_variable = { labour_aluminium = 0.05 }
	multiply_temp_variable = { labour_tungsten = 0.05 }
	multiply_temp_variable = { labour_steel = 0.05 }
	multiply_temp_variable = { labour_chromium = 0.05 }
	multiply_temp_variable = { labour_coal = 0.01 }
	multiply_temp_variable = { labour_bauxite = 0.01 }
	multiply_temp_variable = { labour_iron = 0.01 }
	multiply_temp_variable = { labour_rubber = 0.05 }
	
	#Adds up total labour needed for resources
	set_variable = { resources_labour_k = labour_oil }
	add_to_variable = { resources_labour_k = labour_aluminium } 
	add_to_variable = { resources_labour_k = labour_tungsten } 
	add_to_variable = { resources_labour_k = labour_steel } 
	add_to_variable = { resources_labour_k = labour_chromium } 
	add_to_variable = { resources_labour_k = labour_coal } 
	add_to_variable = { resources_labour_k = labour_bauxite } 
	add_to_variable = { resources_labour_k = labour_iron } 
	add_to_variable = { resources_labour_k = labour_rubber }
}

calculate_factories_labour = {
	set_temp_variable = { damaged_MIL_current = 0 }
	set_temp_variable = { damaged_CIV_current = 0 }
	set_temp_variable = { damaged_NAV_current = 0 }

	every_controlled_state = {
		add_to_temp_variable = { PREV.damaged_CIV_current = damaged_building_level@industrial_complex }
		add_to_temp_variable = { PREV.damaged_MIL_current = damaged_building_level@arms_factory }
		add_to_temp_variable = { PREV.damaged_NAV_current = damaged_building_level@dockyard }
	}

	set_temp_variable = { labour_military_factories = num_of_military_factories }
	add_to_temp_variable = { labour_military_factories = damaged_MIL_current }
	multiply_temp_variable = { labour_military_factories = 5.0 } #5000 MP per mil factory

	set_temp_variable = { labour_civilian_factories = num_of_civilian_factories }
	multiply_temp_variable = { labour_civilian_factories = 6.5 } #6500 MP per civ factory
	add_to_temp_variable = { labour_civilian_factories = damaged_CIV_current }
	
	set_temp_variable = { labour_naval_factories = num_of_naval_factories }
	multiply_temp_variable = { labour_naval_factories = 7.5 } #7500 MP per nav factory
	add_to_temp_variable = { labour_naval_factories = damaged_NAV_current }

	set_variable = { factories_labour_k = labour_military_factories }
	add_to_variable = { factories_labour_k = labour_civilian_factories }
	add_to_variable = { factories_labour_k = labour_naval_factories }
}

calculate_civilian_labour = {
	#Calculate Civilian Needs
	if = {
		limit = {
			OR = {
				tag = USA
				tag = GER
			}
		}
		set_variable = { civilian_services_labour_k = 0.14 }
	}
	else_if = {
		limit = {
			OR = {
				tag = CAN
				tag = ENG
				tag = AST
				tag = ITA #because wine and spaghetti
			}
		}
		set_variable = { civilian_services_labour_k = 0.12 }
	}
	else_if = { # city states
		limit = {
			OR = {
				tag = LUX
				tag = DNZ
			}
		}
		set_variable = { civilian_services_labour_k = 0.05 }
	}
	else = {
		set_variable = { civilian_services_labour_k = 0.1 }
	}
	multiply_variable = { civilian_services_labour_k = total_labour_population_k }	
}

calculate_logistics_labour = {
	logistical_calculations = yes
	#Calculates Army Logistics
	set_variable = { army_logistics_labour_k = total_trucks } # calculated in scripted_effects/army_logisitcs_scripted_effects.txt#logistical_calculations
	multiply_variable = { army_logistics_labour_k = 15 } # 15 manpower per truck 
	
	set_variable = { total_light_manpower = total_light_trucks }
	multiply_variable = { total_light_manpower = 15 }
	set_variable = { light_manpower_per_level = light_trucks_per_level }
	multiply_variable = { light_manpower_per_level = 15 }

	set_variable = { total_heavy_manpower = total_heavy_trucks }
	multiply_variable = { total_heavy_manpower = 15 }
	set_variable = { heavy_manpower_per_level = heavy_trucks_per_level }
	multiply_variable = { heavy_manpower_per_level = 15 }

	set_variable = { total_mot_manpower = total_mot_trucks }
	multiply_variable = { total_mot_manpower = 15 }
	set_variable = { mot_manpower_per_level = mot_trucks_per_level }
	multiply_variable = { mot_manpower_per_level = 15 }

	set_variable = { total_support_manpower = total_support_trucks }
	multiply_variable = { total_support_manpower = 15 }
	set_variable = { support_manpower_per_level = support_trucks_per_level }
	multiply_variable = { support_manpower_per_level = 15 }


    divide_variable = { army_logistics_labour_k = 1000 } # (in 1000s)
}

init_default_logistics_and_women = {
	#Sets default female workplace participation rate (to offset labour needs).
	set_variable = { female_participation_rate = 0.4 }
			
	set_variable = { light_logistics_motorisation_level = 0 }
	set_variable = { heavy_logistics_motorisation_level = 0 }
	set_variable = { mot_logistics_motorisation_level = 0 }
	set_variable = { sup_logistics_motorisation_level = 0 }
}

init_industry_rework = {
	# Adds agriculture mechanisation to every relevant countries
	every_owned_state = {
		calculate_state_level_agriculture_penalty = yes
		add_dynamic_modifier = { modifier = state_agriculture }
	}
	
	on_daily_labour_calculations = yes
	
	#Adds key labour requirements dynamic modifier
	add_dynamic_modifier = { modifier = agriculture_needs }
	add_dynamic_modifier = { modifier = factories_labour_requirements }
	add_dynamic_modifier = { modifier = resources_labour_requirements }
	add_dynamic_modifier = { modifier = civilian_services_labour_requirements }
	add_dynamic_modifier = { modifier = logistical_tail_penalty }
	add_dynamic_modifier = { modifier = female_labour_penalty }
	add_dynamic_modifier = { modifier = not_of_working_age_penalty }
}

calculate_state_level_agriculture_penalty = {
	if = {
		limit = {
			OR = {
				is_core_of = ENG
				is_core_of = URG
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.20 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = FRA
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.21 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = CAN
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.10 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = USA
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.12 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = AST
				is_core_of = NZL
				is_core_of = ARG
				is_core_of = CHL
				is_core_of = NOR
				is_core_of = DEN
				is_core_of = SWE
				is_core_of = SWI
				is_core_of = HOL
				is_core_of = BEL
				is_core_of = DNZ
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.14 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = GER
				is_core_of = CZE
				is_core_of = LUX
				is_core_of = AUS
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.15 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = POL
				is_core_of = BUL
				is_core_of = UKR
				is_core_of = EGY
				is_rainforest_core = yes
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.20 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = SPR
				is_core_of = POR
				is_core_of = YUG
				AND = {
					NOT = {
						is_core_of = CHL
						is_core_of = ARG
					}
					is_on_continent = south_america
				}
				AND = {
					NOT = {
						is_core_of = USA
						is_core_of = CAN
					}
					is_on_continent = north_america
				}
				is_southafrican_colony_core = yes
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.22 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = HUN
				is_core_of = SLO
				is_core_of = GRE
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.23 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = TUR
				is_core_of = FIN
				is_core_of = ITA
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.24 }
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					is_core_of = SOV
					NOT = { is_core_of = UKR }
				}
				is_maghreb_colony_core = yes
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.28 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = LIT
				is_core_of = LAT
				is_core_of = EST
				is_core_of = PER
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.29 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ROM
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.32 }
	}
	else_if = {
		limit = {
			OR = {
				is_core_of = ETH
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.34 }
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					NOT = {
						is_core_of = JAP
						is_core_of = SOV
						is_owned_by = RAJ
					}
					is_on_continent = asia
				}
				
				AND = {
					NOT = {
						is_core_of = AST
						is_core_of = NZL
					}
					is_on_continent = australia
				}
				
				AND = {
					NOT = {
						is_core_of = TUR
						is_core_of = PER
					}
					is_on_continent = middle_east
				}
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.36 }
	}
	else_if = {
		limit = {
			NOT = {
				is_core_of = ETH
				is_southafrican_colony_core = yes
				is_maghreb_colony_core = yes
			}
			is_on_continent = africa
		}
		set_variable = { state_level_agriculture_penalty = 0.38 }
	}
	else_if = {
		limit = {
			OR = {
				is_owned_by = RAJ
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.39 }
	}
	else_if = {
		limit = {
			OR = {
				is_owned_by = JAP
			}
		}
		set_variable = { state_level_agriculture_penalty = 0.28 }
	}
	else = {	
		set_variable = { state_level_agriculture_penalty = 0.38 }
	}
}

# Actual run on init of game.
init_default_logistics_and_women = {
	#Sets default female workplace participation rate (to offset labour needs).
	set_variable = { female_participation_rate = 0.5 }
			
	#Sets default logistical level
	#set_variable = { logistical_level = 1 }
	#set_variable = { signal_level = 1 }
}


 # Actual run on init of game.
init_industry_rework = {
	# Adds agriculture mechanisation to every relevant countries
	every_owned_state = {
		calculate_state_level_agriculture_penalty = yes
	}
	#Adds key labour requirements dynamic modifier

	on_daily_labour_calculations = yes
	add_dynamic_modifier = { modifier = agriculture_needs }
	add_dynamic_modifier = { modifier = factories_labour_requirements }
	add_dynamic_modifier = { modifier = resources_labour_requirements }
	add_dynamic_modifier = { modifier = civilian_services_labour_requirements }
	add_dynamic_modifier = { modifier = female_labour_penalty }
	add_dynamic_modifier = { modifier = not_of_working_age_penalty }
}

civillian_resources_scripted_effect = {
	set_temp_variable = { cic_resource_factor_steel_temp = modifier@cic_resource_steel_factor } #Setting up variable for every resource
	set_temp_variable = { cic_resource_factor_aluminium_temp = modifier@cic_resource_aluminium_factor }
	set_temp_variable = { cic_resource_factor_tungsten_temp = modifier@cic_resource_tungsten_factor }
	set_temp_variable = { cic_resource_factor_chromium_temp = modifier@cic_resource_chromium_factor }
	set_temp_variable = { cic_resource_factor_rubber_temp = modifier@cic_resource_rubber_factor }
	set_temp_variable = { cic_resource_factor_coal_temp = modifier@cic_resource_coal_factor }

	add_to_temp_variable = { cic_resource_factor_steel_temp = 1 } #We are adding 1 since the base consumption is 100% of the resources set in the init_civillian_resources
	add_to_temp_variable = { cic_resource_factor_aluminium_temp = 1 }
	add_to_temp_variable = { cic_resource_factor_tungsten_temp = 1 }
	add_to_temp_variable = { cic_resource_factor_chromium_temp = 1 }
	add_to_temp_variable = { cic_resource_factor_rubber_temp = 1 }
	add_to_temp_variable = { cic_resource_factor_coal_temp = 1 }
	
	add_to_temp_variable = { cic_resource_factor_steel_temp = modifier@cic_resource_factor } #cic_resource_factor affects all resources therefore it has to be added as well
	add_to_temp_variable = { cic_resource_factor_aluminium_temp = modifier@cic_resource_factor }
	add_to_temp_variable = { cic_resource_factor_tungsten_temp = modifier@cic_resource_factor }
	add_to_temp_variable = { cic_resource_factor_chromium_temp = modifier@cic_resource_factor }
	add_to_temp_variable = { cic_resource_factor_rubber_temp = modifier@cic_resource_factor }
	add_to_temp_variable = { cic_resource_factor_coal_temp = modifier@cic_resource_factor }
	
	set_temp_variable = { num_factories_temp = THIS.num_of_civilian_factories } #num_of_civilian_factories includes traded factories. We currently cannot exclude traded fractories so we have to accept that traded factories take resources
	
	multiply_temp_variable = { cic_resource_factor_steel_temp = num_factories_temp } #Multiply factory count
	multiply_temp_variable = { cic_resource_factor_aluminium_temp = num_factories_temp }
	multiply_temp_variable = { cic_resource_factor_tungsten_temp = num_factories_temp }
	multiply_temp_variable = { cic_resource_factor_chromium_temp = num_factories_temp }
	multiply_temp_variable = { cic_resource_factor_rubber_temp = num_factories_temp }
	multiply_temp_variable = { cic_resource_factor_coal_temp = num_factories_temp }
	
	set_variable = { cic_steel = 2 } #Get the current base consumption values
	set_variable = { cic_aluminium = 1.5 }
	set_variable = { cic_tungsten = 0.25 }
	set_variable = { cic_chromium = 0.15 }
	set_variable = { cic_rubber = 0.2 }
	set_variable = { cic_coal = 1.75 }
	
	multiply_variable = { cic_steel = cic_resource_factor_steel_temp } #Multiply the consumption values
	multiply_variable = { cic_aluminium = cic_resource_factor_aluminium_temp }
	multiply_variable = { cic_tungsten = cic_resource_factor_tungsten_temp }
	multiply_variable = { cic_chromium = cic_resource_factor_chromium_temp }
	multiply_variable = { cic_rubber = cic_resource_factor_rubber_temp }
	multiply_variable = { cic_coal = cic_resource_factor_coal_temp }
}

factory_passive_coal_consumption_scripted_effect = {
	set_variable = { factory_coal_consumption = 2} #This is the passive coal consumption. If changed, update the buildings localisation.
	set_temp_variable = { num_factories_temp = THIS.num_of_controlled_factories } #Get total numbers of factories (dockyards, military factories and civillian factories)
	multiply_variable = { factory_coal_consumption = num_factories_temp }
}

log_manpower_factor = {
	if = {
		limit = { is_debug = yes }
		every_country = {
			limit = {
				OR = {
					tag = ROM
					tag = HUN
					tag = POL
					tag = AST
					tag = CAN
					tag = FIN
					tag = RAJ
					is_major = yes
				}
			}
			set_temp_variable = {
				cf = 1.000
			}
			add_to_temp_variable = {
				cf = THIS.modifier@conscription_factor
			}
			multiply_temp_variable = {
				cf = 100
			}
			log = "[?cf|1]% - [THIS.GetTag]"

		}
		log = "-------------------------------------------------------------------------------------------------------------------------------------"
	}
}

log_manpower_factor_other = {
	if = {
		limit = { is_debug = yes }
		every_country = {
			limit = {
				NOT = {
					tag = ROM
					tag = HUN
					tag = POL
					tag = AST
					tag = CAN
					tag = FIN
					tag = RAJ
					is_major = yes
				}
			}
			set_temp_variable = {
				cf = 1.000
			}
			add_to_temp_variable = {
				cf = THIS.modifier@conscription_factor
			}
			multiply_temp_variable = {
				cf = 100
			}
			log = "[?cf|1]% - [THIS.GetTag]"

		}
		log = "-------------------------------------------------------------------------------------------------------------------------------------"
	}
}

log_manpower_variables = {
	if = {
		limit = { is_debug = yes }
		every_country = {
			log = "#Init manpower variables [THIS.GetTag] [?THIS.agricultural_penalty_calculation|3] [?THIS.factories_labour_penalty_calculation|3] [?THIS.resources_labour_penalty_calculation|3]"
		}
		log = "-------------------------------------------------------------------------------------------------------------------------------------"
	}
}