# How many need to be closed

rp_close_steel_mills = {
    set_temp_variable = { steel_cost_iron = 80 }
    set_temp_variable = { steel_cost_coal = 100 }
    set_temp_variable = { deficit_iron = resource@iron }
    set_temp_variable = { deficit_coal = resource@coal }
    set_temp_variable = { num_to_close_iron = resource@iron }
    set_temp_variable = { num_to_close_coal = resource@coal }

    divide_temp_variable = { num_to_close_iron = steel_cost_iron }
    divide_temp_variable = { num_to_close_coal = steel_cost_coal }
    round_temp_variable = num_to_close_iron
    round_temp_variable = num_to_close_coal
    IF = {
        limit = {
                check_variable = {
                    resource@iron < 0
                }
                check_variable = {
                    resource@coal < 0
                }
                check_variable = {
                    num_to_close_coal < num_to_close_iron
                }
        }
        multiply_temp_variable = { num_to_close_coal = -1 }
        set_temp_variable = { ntc_sr = num_to_close_coal }
    }
    ELSE_IF = {
        limit = {
            check_variable = {
                resource@iron < 0
            }
            check_variable = {
                resource@coal < 0
            }
            check_variable = {
			    var = num_to_close_coal
			    value = num_to_close_iron
			    compare = greater_than_or_equals
		    }
        }
        multiply_temp_variable = { num_to_close_iron = -1 }
        set_temp_variable = { ntc_sr = num_to_close_iron }
    }
    ELSE_IF = {
        limit = {
			check_variable = {
				resource@iron > -1
			}
			check_variable = {
				resource@coal < 0
			}
		}
	    multiply_temp_variable = { num_to_close_coal = -1 }
        set_temp_variable = { ntc_sr = num_to_close_coal }
    }
    ELSE_IF = {
        limit = {
			check_variable = {
				resource@iron < 0
			}
			check_variable = {
				resource@coal > -1
			}
		}
	    multiply_temp_variable = { num_to_close_iron = -1 }
        set_temp_variable = { ntc_sr = num_to_close_iron }
    }
    IF = {
        limit = {
            check_variable = { ntc_sr = 0 }
        }
        add_to_temp_variable = { ntc_sr = 1 }
    }

    every_controlled_state = {
        limit = { steel_refinery > 0
            NOT = {
                is_owned_by = ROOT
            }
        }
        add_to_temp_array = { close_mill_candidates_nc = THIS }
    }
    every_controlled_state = {
        limit = { 
            steel_refinery > 0
            is_owned_by = ROOT
        }
        add_to_temp_array = { close_mill_candidates_nc = THIS }
    }
    for_each_loop = { 
        array = close_mill_candidates_nc
        var:v = {
            if = {
                limit = {
                    check_variable = {
                        var = building_level@steel_refinery
                        value = ntc_sr
                        compare = greater_than_or_equals
                    }
                }
			    remove_building = {
				    type = steel_refinery
				    level = var:ntc_sr
			    }
			    add_building_construction = {
				    type = steel_refinery_inactive
			    	level = var:ntc_sr
			    	instant_build = yes    
                }
                subtract_from_temp_variable = { ntc_sr = ntc_sr }
                set_temp_variable = { break = 1 }
            }
            else_if = {
                limit = {
                    check_variable = {
                        var = building_level@steel_refinery
                        value = ntc_sr
                        compare = less_than
                    }
                }
                subtract_from_temp_variable = { ntc_sr = building_level@steel_refinery }
			    add_building_construction = {
			    	type = steel_refinery_inactive
				    level = var:building_level@steel_refinery
				    instant_build = yes    
                }
                remove_building = {
				    type = steel_refinery
				    level = var:building_level@steel_refinery
			    }
            }
        }
    }
}
rp_close_aluminium_mills = {
    # How many need to be closed
	set_temp_variable = { al_cost_bauxite = 150 }
	set_temp_variable = { al_cost_coal = 100 }
	set_temp_variable = { deficit_bauxite = resource@bauxite }
	set_temp_variable = { deficit_coal = resource@coal }
	set_temp_variable = { num_to_close_bauxite = resource@bauxite }
	set_temp_variable = { num_to_close_coal = resource@coal }

	divide_temp_variable = { num_to_close_bauxite = al_cost_bauxite }
	divide_temp_variable = { num_to_close_coal = al_cost_coal }
	round_temp_variable = num_to_close_bauxite
	round_temp_variable = num_to_close_coal
    IF = {
        limit = {
            check_variable = {
                resource@bauxite < 0
            }
            check_variable = {
                resource@coal < 0
            }
            check_variable = {
                num_to_close_coal < num_to_close_bauxite
            }
        }
        multiply_temp_variable = { num_to_close_coal = -1 }
        set_temp_variable = { ntc_ar = num_to_close_coal }
    }
    ELSE_IF = {
        limit = {
            check_variable = {
                resource@bauxite < 0
            }
            check_variable = {
                resource@coal < 0
            }
            check_variable = {
		    	var = num_to_close_coal
		    	value = num_to_close_bauxite
		    	compare = greater_than_or_equals
		    }
        }
        multiply_temp_variable = { num_to_close_bauxite = -1 }
        set_temp_variable = { ntc_ar = num_to_close_bauxite }
    }
    ELSE_IF = {
        limit = {
			check_variable = {
				resource@bauxite > -1
			}
			check_variable = {
				resource@coal < 0
			}
		}
	    multiply_temp_variable = { num_to_close_coal = -1 }
        set_temp_variable = { ntc_ar = num_to_close_coal }
    }
    ELSE_IF = {
        limit = {
			check_variable = {
				resource@bauxite < 0
			}
			check_variable = {
				resource@coal > -1
			}
		}
	    multiply_temp_variable = { num_to_close_bauxite = -1 }
        set_temp_variable = { ntc_ar = num_to_close_bauxite }
    }
    IF = {
        limit = {
            check_variable = { ntc_ar = 0 }
        }
        add_to_temp_variable = { ntc_ar = 1 }
    }

    every_controlled_state = {
        limit = { aluminium_refinery > 0
            NOT = {
                is_owned_by = ROOT
            }
        }
        add_to_temp_array = { close_amill_candidates_nc = THIS }
    }
    every_controlled_state = {
        limit = { 
            aluminium_refinery > 0
            is_owned_by = ROOT
        }
        add_to_temp_array = { close_amill_candidates_nc = THIS }
    }
    for_each_loop = { 
        array = close_amill_candidates_nc
        var:v = {
            if = {
                limit = {
                    check_variable = {
                        var = building_level@aluminium_refinery
                        value = ntc_ar
                        compare = greater_than_or_equals
                    }
                }
			    remove_building = {
			    	type = aluminium_refinery
			    	level = var:ntc_ar
			    }
			    add_building_construction = {
			    	type = aluminium_refinery_inactive
			    	level = var:ntc_ar
			    	instant_build = yes    
                }
                subtract_from_temp_variable = { ntc_ar = ntc_ar }
                set_temp_variable = { break = 1 }
            }
            else_if = {
                limit = {
                    check_variable = {
                        var = building_level@aluminium_refinery
                        value = ntc_ar
                        compare = less_than
                    }
                }
                subtract_from_temp_variable = { ntc_ar = building_level@aluminium_refinery }
			    add_building_construction = {
			    	type = aluminium_refinery_inactive
			    	level = var:building_level@aluminium_refinery
			    	instant_build = yes
                }  
                remove_building = {
			    	type = aluminium_refinery
			    	level = var:building_level@aluminium_refinery
			    }  
            }
        }
    }
}
rp_reopen_steel_mills = {
	# How many can be reopened
	set_temp_variable = { steel_cost_iron = 80 }
	set_temp_variable = { steel_cost_coal = 100 }
	set_temp_variable = { surplus_iron = resource@iron }
	set_temp_variable = { surplus_coal = resource@coal }
	set_temp_variable = { num_to_reopen_iron = resource@iron }
	set_temp_variable = { num_to_reopen_coal = resource@coal }

	divide_temp_variable = { num_to_reopen_iron = steel_cost_iron }
	divide_temp_variable = { num_to_reopen_coal = steel_cost_coal }
	round_temp_variable = num_to_reopen_iron
	round_temp_variable = num_to_reopen_coal
   	IF = {
		limit = {
			check_variable = {
				num_to_reopen_coal < num_to_reopen_iron
			}
		}
        set_temp_variable = { ntr_sr = num_to_reopen_coal }
        }
    ELSE_IF = {
		limit = {
			check_variable = {
				var = num_to_reopen_coal
				value = num_to_reopen_iron
				compare = greater_than_or_equals
			}
    	}
        set_temp_variable = { ntr_sr = num_to_reopen_iron }
    }
    IF = {
        limit = {
            check_variable = { ntr_sr = 0 }
        }
        add_to_temp_variable = { ntr_sr = 1 }
    }
    every_controlled_state = {
        limit = { 
            steel_refinery_inactive > 0
            is_owned_by = ROOT
        }
        add_to_temp_array = { reopen_mill_candidates_nc = THIS }
    }
    every_controlled_state = {
        limit = { steel_refinery_inactive > 0
            NOT = {
                is_owned_by = ROOT
            }
        }
        add_to_temp_array = { reopen_mill_candidates_nc = THIS }
    }
    for_each_loop = { 
        array = reopen_mill_candidates_nc
        var:v = {
            if = {
                limit = {
                    check_variable = {
                        var = building_level@steel_refinery_inactive
                        value = ntr_sr
                        compare = greater_than_or_equals
                    }
                }
		        remove_building = {
			        type = steel_refinery_inactive
    		        level = var:ntr_sr
		        }
		        add_building_construction = {
			        type = steel_refinery
			        level = var:ntr_sr
    		        instant_build = yes    
                }
                subtract_from_temp_variable = { ntr_sr = ntr_sr }
                set_temp_variable = { break = 1 }
            }
            else_if = {
                limit = {
                    check_variable = {
                        var = building_level@steel_refinery_inactive
                        value = ntr_sr
                        compare = less_than
                    }
                }
                subtract_from_temp_variable = { ntr_sr = building_level@steel_refinery_inactive }
		        add_building_construction = {
			        type = steel_refinery
			        level = var:building_level@steel_refinery_inactive
    		        instant_build = yes
                }  
                remove_building = {
			        type = steel_refinery_inactive
			        level = var:building_level@steel_refinery_inactive
    	        }  
            }
        }
    }
}
rp_reopen_aluminium_mills = {
	# How many can be reopened
	set_temp_variable = { al_cost_bauxite = 150 }
	set_temp_variable = { al_cost_coal = 100 }
	set_temp_variable = { surplus_bauxite = resource@bauxite }
	set_temp_variable = { surplus_coal = resource@coal }
	set_temp_variable = { num_to_reopen_bauxite = resource@bauxite }
	set_temp_variable = { num_to_reopen_coal = resource@coal }

	divide_temp_variable = { num_to_reopen_bauxite = al_cost_bauxite }
	divide_temp_variable = { num_to_reopen_coal = al_cost_coal }
	round_temp_variable = num_to_reopen_bauxite
	round_temp_variable = num_to_reopen_coal
   	IF = {
		limit = {
			check_variable = {
				num_to_reopen_coal < num_to_reopen_bauxite
			}
		}
        set_temp_variable = { ntr_ar = num_to_reopen_coal }
        }
    ELSE_IF = {
		limit = {
			check_variable = {
				var = num_to_reopen_coal
				value = num_to_reopen_bauxite
				compare = greater_than_or_equals
			}
    	}
        set_temp_variable = { ntr_ar = num_to_reopen_bauxite }
    }
    IF = {
        limit = {
            check_variable = { ntr_ar = 0 }
        }
        add_to_temp_variable = { ntr_ar = 1 }
    }
    every_controlled_state = {
        limit = { 
            aluminium_refinery_inactive > 0
            is_owned_by = ROOT
        }
        add_to_temp_array = { reopen_amill_candidates_nc = THIS }
    }
    every_controlled_state = {
        limit = { aluminium_refinery_inactive > 0
            NOT = {
                is_owned_by = ROOT
            }
        }
        add_to_temp_array = { reopen_amill_candidates_nc = THIS }
    }
    for_each_loop = { 
        array = reopen_amill_candidates_nc
        var:v = {
            if = {
                limit = {
                    check_variable = {
                        var = building_level@aluminium_refinery_inactive
                        value = ntr_ar
                        compare = greater_than_or_equals
                    }
                }
		        remove_building = {
			        type = aluminium_refinery_inactive
    		        level = var:ntr_ar
		        }
		        add_building_construction = {
			        type = aluminium_refinery
			        level = var:ntr_ar
    		        instant_build = yes    
                }
                subtract_from_temp_variable = { ntr_ar = ntr_ar }
                set_temp_variable = { break = 1 }
            }
            else_if = {
                limit = {
                    check_variable = {
                        var = building_level@aluminium_refinery_inactive
                        value = ntr_ar
                        compare = less_than
                    }
                }
                subtract_from_temp_variable = { ntr_ar = building_level@aluminium_refinery_inactive }
		        add_building_construction = {
			        type = aluminium_refinery
			        level = var:building_level@aluminium_refinery_inactive
    		        instant_build = yes
                }  
                remove_building = {
			        type = aluminium_refinery_inactive
			        level = var:building_level@aluminium_refinery_inactive
    	        }  
            }
        }
    }
}

rp_close_synthetic_refineries = {
    IF = {
        limit = {
            any_controlled_state = {
                synthetic_refinery > 0
                NOT = {
                    is_owned_by = ROOT
                }
            }
        }
        random_controlled_state = {
            limit = {
                synthetic_refinery > 0
                NOT = {
                    is_owned_by = ROOT
                }
            }
            remove_building = {
                type = synthetic_refinery
                level = 1
            }
            add_building_construction = {
                type = synthetic_refinery_inactive
                level = 1
                instant_build = yes
            }
        }
    }
    ELSE = {
        random_owned_controlled_state = {
            limit = {
                synthetic_refinery > 0
            }
            remove_building = {
                type = synthetic_refinery
                level = 1
            }
            add_building_construction = {
                type = synthetic_refinery_inactive
                level = 1
                instant_build = yes
            }
        }
    }
}

rp_close_synthetic_rubber_refineries = {
    IF = {
        limit = {
            any_controlled_state = {
                synthetic_rubber_refinery > 0
                NOT = {
                    is_owned_by = ROOT
                }
            }
        }
        random_controlled_state = {
            limit = {
                synthetic_rubber_refinery > 0
                NOT = {
                    is_owned_by = ROOT
                }
            }
            remove_building = {
                type = synthetic_rubber_refinery
                level = 1
            }
            add_building_construction = {
                type = synthetic_rubber_refinery_inactive
                level = 1
                instant_build = yes
            }
        }
    }
    ELSE = {
        random_owned_controlled_state = {
            limit = {
                synthetic_rubber_refinery > 0
            }
            remove_building = {
                type = synthetic_rubber_refinery
                level = 1
            }
            add_building_construction = {
                type = synthetic_rubber_refinery_inactive
                level = 1
                instant_build = yes
            }
        }
    }
}